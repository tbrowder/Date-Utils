=begin pod

=head1 NAME

B<Date::Utils> - Provides helpful date routines for calendar creation

=head1 SYNOPSIS

=begin code :lang<raku>
use Date::Utils;
...# use the routines to create a calendar
=end code

=head1 DESCRIPTION

B<Date::Utils> is a collection of routines to help users calculate
certain dates in relation to other dates provided by Raku's powerful
C<Date> class.

Current routines provided:

=begin item
C<days-in-week1>

Given the starting day-of-the-week (DoW)
for a calendar week and the DoW
of the first Date of the month,
this routine returns the number of days remaining
in that first calendar week.

=begin code
subset DoW of Int where { 0 < $_ < 8 }
sub days-in-week1(
    DoW $cal-week-start-dow = 7, # range 1..7, default is US practice
    DoW $first-dow,
    :$debug,
    --> DoW
) is export {...}
=end code
=end item

=begin item
C<weeks-in-month>

These two multi-subs return the total number of full and partial
seven-day weeks in a calendar month where the day-of-week order begins
with any desired day and ends the week six days later. The default is
to start calendar weeks on Sunday and end on Saturday as normally used
in US calendars. 

=begin code
multi sub weeks-in-month(
    :$year!, :$month!,
    DoW :$cal-first-dow = 7, # Sunday
    :$debug
    --> UInt) {...}

multi sub weeks-in-month(
    Date $date,
    DoW :$cal-first-dow = 7, # Sunday
    :$debug
    --> UInt) {...}
=end code
=end item

=begin item
C<nth-day-of-week-in-month>

=begin code
sub nth-day-of-week-in-month(
    :$year!, :$month!, :$nth! is copy,
    DoW :$day-of-week!,
    :$debug
    --> Date) {...}
=end code

If C<$nth> is greater than the actual number of C<day-of-week>s in the
desired month or if that number is zero or negative, the date of its
last appearance in that month is returned.

As a convenience, a version of the same routine requiring fewer key
strokes is provided:

=begin code
sub nth-dow-in-month(
    :$year!, :$month!, :$nth! is copy,
    DoW :$dow!,
    :$debug
    --> Date) {...}
=end code
=end item

=begin item
C<nth-day-of-week-after-date>

=begin code
sub nth-day-of-week-after-date(
    Date :$date!, :$nth! is copy,
    DoW :$day-of-week!,
    :$debug
    --> Date) {...}
=end code

As a convenience, a version of the same routine requiring fewer key
strokes is provided:

=begin code
sub nth-dow-after-date(
    Date :$date!, :$nth! is copy,
    DoW :$dow!,
    :$debug
    --> Date) {...}
=end code
=end item

=Notes

New since the original release is a more general routine to calculate the
I<weeks-in-month> for B<any> starting day of the week (DoW) given its
number (Monday through Sunday) as a Raku Date DoW in the range 1..7
(the default DoW order for a Raku Date).
The routine is important for laying out a calendar because it
determines the vertical space required for the presentation.

With a calendar week starting on Monday, the Raku Date DoW values for
a month are shown below along with the corresponding calendar values
for a 31-day month starting on a Friday.  Note there are five calendar
weeks consisting of one partial week followed by four full weeks.

=begin code
Code             Days
M T W T F S S    Mo Tu We Th Fr Sa Su
        5 6 7                 1  2  3
1 2 3 4 5 6 7     4  5  6  7  8  9 10
1 2 3 4 5 6 7    11 12 13 14 15 16 17
1 2 3 4 5 6 7    18 19 20 21 22 23 24
1 2 3 4 5 6 7    25 26 27 28 29 30 31
=end code

Changing the calendar week start day can have significant effects. If the 
calendar week starts on a Sunday, the Date DoW numbers and the
calendar days for the B<same month> change to the form shown below.  
Note there are now B<six> calendar weeks consisting of one partial
week followed by four full weeks followed by one partial week.

=begin code
Code             Days
S M T W T F S    Su Mo Tu We Th Fr Sa
          5 6                    1  2
7 1 2 3 4 5 6     3  4  5  6  7  8  9
7 1 2 3 4 5 6    10 11 12 13 14 15 16
7 1 2 3 4 5 6    17 18 19 20 21 22 23
7 1 2 3 4 5 6    24 25 26 27 28 29 30
7                31
=end code

Raku's
C<Date> routines provide us with two known values of the month
that will enable the needed calculations. They are:

=begin code
A: Date.first-date-of-month.day-of-week # range: 1..7
B: Date.days-in-month                   # range: 28..31
=end code

Given the first value (A), and knowing the DoWs retain their order,
we can derive the Date days in the first calendar week. 
Lists of Date days stay in the proper order as shown here
in code used herein:

=begin code
=end code

So we must get one of the above sequences in a first week of one
to seven days. Note also each sequence is defined by its first day number,
but it does B<not> have to have its full set of days (as occurs in a
partial first week).

For example, given a calendar week that starts on Sunday (Date DoW 7)
and the first day of the month is a Date DoW of 2 (Tuesday),
using the routine C<days-in-week1> yields a value of 5 which is the 
number of days remaining in that first week.

=begin code
C: days-in-week1 7, 2  # OUTPUT: 5
=end code

Subtracting that number from the B<A> value (C<Date.days-in-month>)
yields the number of days left in the month: C<A - C = 26>.

Those remaining days divided by seven (and rounded up by one for
any partial week) yield the remaining 
weeks so we have our desired number as it plus the first week,

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Â© 2024 Tom Browder

This library is free software; you may redistribute it or modify it under the Artistic License 2.0.

=end pod
